[{"content":"","date":1508426775,"description":"Text about this post","lastmod":"2019-10-26T15:26:15Z","objectID":"3976528693a0108357f4928017600865","permalink":"https://butr.github.io/documentation/","publishdate":"2018-11-23T15:26:15Z","title":"Home title"},{"content":"","date":1639584240,"description":"","lastmod":"2021-12-15T19:04:00+03:00","objectID":"65a97066c0c3d6bcb7bfdd734849a02f","permalink":"https://butr.github.io/documentation/advanced/","publishdate":"2021-12-15T19:04:00+03:00","title":"Advanced"},{"content":"Introduction Our BUTR mods have a famous history of backwards compatibility.\nWe use several techniques to achieve this without causing huge performance drops by using Harmony\u0026amp;rsquo;s built in reflection tools and caching.\nOne of the techniques we use is type wrapping.\nIt\u0026amp;rsquo;s used for several cases:\n When types are moved between assemblies. Generally, to fix this you need to recompile your mod with the new locations, but it won\u0026amp;rsquo;t be backwards compatible this way. Instead, we stop working with the type directly and wrap it as an object, exposing an abstraction to work with. Incompatible signature changes. The method signature was replaced without keeping the old signature. Depending on the game version, you\u0026amp;rsquo;ll need to call different methods.  Type Move Read-life example of type move.\nIn our BUTRLoader, we target e1.5.0 as the minimal supported version. Since the type was moved in e1.5.x, we either need to have 2 compiled assemblies and load one depending on the game version (see Implementation Loading), or create a type wrapper, what we did.\n// The game at some point moved type ModuleInfo // TaleWorlds.Library.ModuleInfo // to // TaleWorlds.ModuleManager.ModuleInfo // The type can\u0026amp;#39;t be directly referenced and used because it\u0026amp;#39;s location // is not consistent anymore/ // So we instead create a wrapper class that access the type indirectly  internal sealed class ModuleInfoWrapper { private delegate string GetIdDelegate(object instance); private delegate string GetAliasDelegate(object instance); private delegate bool GetIsSelectedDelegate(object instance); private static readonly Type? OldModuleInfoType = AccessTools2.TypeByName(\u0026amp;#34;TaleWorlds.Library.ModuleInfo\u0026amp;#34;); private static readonly Type? NewModuleInfoType = AccessTools2.TypeByName(\u0026amp;#34;TaleWorlds.ModuleManager.ModuleInfo\u0026amp;#34;); public static readonly Type? ModuleInfoType = OldModuleInfoType ?? NewModuleInfoType; private static readonly GetIdDelegate? GetId = â€¦","date":1639580221,"description":"","lastmod":"2021-12-15T17:57:01+03:00","objectID":"ff51d580fb08e43ef450d500921197aa","permalink":"https://butr.github.io/documentation/advanced/type-wrapping/","publishdate":"2021-12-15T17:57:01+03:00","title":"Type Wrapping"}]